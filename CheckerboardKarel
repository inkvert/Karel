from karel.stanfordkarel import *

def main():
    """
    Creates a checkerboard pattern of beepers in any size world.
    Current issues:
    1): Only functions on worlds 2x2 or greater.

    """
    while front_is_clear():
        loop_put_and_move()
    if front_is_blocked():
        end_turn_and_check()
    return_home()

def loop_put_and_move():
    #Creates a while loop for put_and_move then includes a fencepost error fix for worlds with odd width.
    while front_is_clear():
        put_and_move()
    if front_is_blocked():
        put_and_move()

def put_and_move():
    #Combines three functions that, when looped, allow Karel to draw the pattern on a grid of any size.
    put_if_no_beepers()
    move_two_if_clear()
    repeat_rows()

def put_if_no_beepers():
    #If there is no beeper on a corner, Karel will place one.
    if no_beepers_present():
        put_beeper()

def move_two_if_clear():
    #Karel moves two corners if there is space, otherwise they climb to the next row.
    for i in range(2):
        if front_is_clear():
            move()
        else:
            turn_left()
            if front_is_clear():
                move()
            else:
                turn_left()
                turn_left()
            turn_left()

def repeat_rows():
    #Karel goes down one corner and comes back up in order to maintain the row pattern.
     if beepers_present():
        turn_left()
        if front_is_clear():
            move()
        if front_is_clear():
            move()
            turn_right()

def end_turn_and_check():
    #Karel turns at the end of their loop to undo two beepers in a row placed on even worlds.
    turn_left()
    turn_left()
    move()
    if beepers_present():
        turn_left()
        turn_left()
        move()
        if beepers_present():
            pick_beeper()
def return_home():
    #Returns Karel if world is EvenxEven or EvenxOdd
    if facing_west():
        turn_left()
        while front_is_clear():
            move()
        turn_left()
    #Returns Karel if world is OddxOdd
    if facing_south():
        while front_is_clear():
            move()
        turn_right()
        while front_is_clear():
            move()
        turn_left()
        turn_left()
    #Returns Karel if world is OddxEven
    if facing_north():
        turn_left()
        turn_left()
        while front_is_clear():
            move()
        turn_right()
        while front_is_clear():
            move()
        turn_left()
        turn_left()

def turn_right():
    #Karel can only turn left, so this fabricates a right turn by turning left three times.
    for i in range(3):
        turn_left()

# don't change this code
if __name__ == '__main__':
    main()
